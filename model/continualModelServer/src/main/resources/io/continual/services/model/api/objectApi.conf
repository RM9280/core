#
# Model endpoints
#

package io.continual.services.model.api.endpoints

#######################################################################################################################
#
#	basic object manipulation
#

#
#	Object paths are expected to contain slashes, but they have to be encoded (%2f) in order to allow our 
#	request path parsing to be sane.
#

#
#	Get an object by its path. If the path is not an object but
#	is a container for other objects, a listing is returned.
#
GET		/v1/model/{objPath}			ObjectApi.getObject
GET		/v1/model					ObjectApi.getObject		# to catch top-level request
GET		/v1/model/					ObjectApi.getObject		# to catch top-level request

#
#	Overwrite an object's data. 
#
PUT		/v1/model/{objPath}		ObjectApi.putObject

#
#   Update an object's data
#
PATCH	/v1/model/{objPath}		ObjectApi.patchObject

#
#   Delete an object
#
DELETE	/v1/model/{objPath}		ObjectApi.deleteObject


#######################################################################################################################
#
#	relationships
#

#
#	Get inbound relations. Optionally add ?rn=<name> to limit to a relation name
#
GET		/v1/relations/in/{objPath}		ObjectApi.getInboundRelations

#
#	Get outbound relations. Optionally add ?rn=<name> to limit to a relation name
#
GET		/v1/relations/out/{objPath}		ObjectApi.getOutboundRelations

#
#	Get all relations.
#
GET		/v1/relations/all/{objPath}		ObjectApi.getAllRelations

#
#	Create a relationship. The payload is ignored.
#
PUT		/v1/relations/{fromObjPath}/{name}/{toObjPath}		ObjectApi.putRelation

#
#	Create multiple relationships. The body is an object with an array named "relations". Each relation
#	entry is an object with from, name and to.
#
#	If the request is only partially fulfilled, the response status code is 200 OK but contains an errors
#	array to list which relationships were not created.
#
POST	/v1/relations		ObjectApi.postRelations

#
#	Delete a relationship
#
DELETE	/v1/relations/{fromObjPath}/{name}/{toObjPath}		ObjectApi.deleteRelation

